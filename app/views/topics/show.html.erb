<div class="topic-wall">
  <div class="topic-header">
    <h1>#<%= @topic %></h1>
    
    <div class="topic-selector">
      <form action="<%= root_path %>" method="get" class="topic-form">
        <select name="topic" id="topic-select" onchange="this.form.submit()">
          <option value="">选择话题...</option>
          <% @topics.each do |topic| %>
            <option value="<%= topic %>" <%= 'selected' if topic == @topic %>>#<%= topic %></option>
          <% end %>
        </select>
      </form>
    </div>
  </div>

  <div class="posts-container" id="posts-container" data-topic="<%= @topic %>" data-connection-id="<%= session.id %>">
    <%= render 'posts', posts: @posts, topic: @topic %>
  </div>
</div>

<% content_for :styles do %>
  <style>
    .topic-wall {
      padding: 20px;
      max-width: 1200px;
      margin: 0 auto;
    }

    .topic-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 30px;
    }
    
    .topic-selector select {
      padding: 8px 12px;
      border: 1px solid #dbdbdb;
      border-radius: 4px;
      background-color: #fff;
      font-size: 1em;
      color: #262626;
      cursor: pointer;
      outline: none;
    }
    
    .topic-selector select:hover {
      border-color: #0095f6;
    }

    .posts-container {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
      gap: 20px;
    }
    
    .load-more-container {
      grid-column: 1 / -1;
      text-align: center;
      margin: 20px 0;
    }
    
    .load-more-button {
      background-color: #0095f6;
      color: white;
      border: none;
      border-radius: 4px;
      padding: 10px 20px;
      font-size: 1em;
      cursor: pointer;
      transition: background-color 0.2s;
    }
    
    .load-more-button:hover {
      background-color: #0077c5;
    }
    
    .new-post-animation {
      animation: fadeIn 0.8s ease-in-out;
      border: 2px solid #0095f6;
      box-shadow: 0 0 15px rgba(0, 149, 246, 0.5);
    }
    
    @keyframes fadeIn {
      from {
        opacity: 0;
        transform: translateY(-20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    .new-post-notification {
      position: fixed;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      background-color: #0095f6;
      color: white;
      padding: 12px 20px;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      z-index: 1000;
      cursor: pointer;
      opacity: 0;
      transition: opacity 0.3s, transform 0.3s;
      pointer-events: none;
    }
    
    .new-post-notification.show {
      opacity: 1;
      pointer-events: auto;
      animation: notificationBounce 0.5s;
    }
    
    @keyframes notificationBounce {
      0%, 20%, 50%, 80%, 100% {transform: translateX(-50%) translateY(0);}
      40% {transform: translateX(-50%) translateY(-10px);}
      60% {transform: translateX(-50%) translateY(-5px);}
    }
  </style>
<% end %>

<div id="new-post-notification" class="new-post-notification">
  有新帖子！点击查看
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // ===== 全局变量和配置对象 =====
    const plyrOptions = {
      controls: ['play-large', 'play', 'progress', 'current-time', 'mute', 'volume', 'captions', 'settings', 'pip', 'airplay', 'fullscreen'],
      loadSprite: true,
      iconUrl: 'https://cdn.jsdelivr.net/npm/plyr@3.7.8/dist/plyr.svg'
    };

    const lightboxOptions = {
      touchNavigation: true,
      loop: true,
      autoplayVideos: false,
      plyr: plyrOptions,
      closeButton: true,
      closeOnOutsideClick: true,
      preload: false,
      zoomable: true,
      draggable: true,
      descPosition: 'bottom',
      cssEfects: {
        fade: {in: 'fadeIn', out: 'fadeOut'},
        zoom: {in: 'zoomIn', out: 'zoomOut'}
      }
    };

    const postsContainer = document.getElementById('posts-container');
    const notification = document.getElementById('new-post-notification');
    let isUserAtBottom = true;
    let isUserAtTop = true;
    let hasNewPosts = false;
    let scrollTimeout;
    const topicName = postsContainer.dataset.topic;
    const sessionId = postsContainer.dataset.connectionId;
    let lightbox;

    // ===== 函数定义 =====
    function initializePlyrPlayers(elements) {
      if (!elements) return;
      let playerElements = elements;
      if (elements instanceof Element && elements.matches('.post-video')) {
        playerElements = [elements];
      } else if (elements instanceof Element) {
        playerElements = elements.querySelectorAll('.post-video');
      } else if (!(elements instanceof NodeList || Array.isArray(elements))) {
        playerElements = document.querySelectorAll(elements);
      }
      const elementsToInit = Array.from(playerElements).filter(el => el && el.matches && el.matches('.post-video') && !el.plyr);
      if (elementsToInit.length > 0) {
        try {
          Plyr.setup(elementsToInit, plyrOptions);
        } catch (e) {
          console.error('Error initializing Plyr:', e, 'on elements:', elementsToInit);
        }
      }
    }

    function checkUserPosition() {
      const scrollPosition = window.scrollY;
      const windowHeight = window.innerHeight;
      const pageHeight = document.body.scrollHeight;
      isUserAtBottom = (scrollPosition + windowHeight >= pageHeight - 50);
      isUserAtTop = (scrollPosition < 50);
      if (isUserAtTop && hasNewPosts) {
        hideNewPostNotification();
        hasNewPosts = false;
      }
    }

    function showNewPostNotification() {
      if (!isUserAtTop && !isUserAtBottom) {
        notification.classList.add('show');
      }
    }

    function hideNewPostNotification() {
      notification.classList.remove('show');
    }

    function handleLoadMoreClick(event) {
      if (event.target.classList.contains('load-more-button')) {
        const loadMoreContainer = event.target.closest('.load-more-container');
        if (!loadMoreContainer) return;
        const topic = loadMoreContainer.dataset.topic;
        const nextPage = loadMoreContainer.dataset.nextPage;
        const button = event.target;
        button.disabled = true;
        button.textContent = '加载中...';
        console.log(`加载更多: topic=${topic}, page=${nextPage}`);
        fetch(`/topics/${topic}?page=${nextPage}`, {
          headers: {
            'X-Requested-With': 'XMLHttpRequest',
            'Accept': 'text/html'
          }
        })
        .then(response => {
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          return response.text();
        })
        .then(html => {
          const tempContainer = document.createElement('div');
          tempContainer.innerHTML = html.trim();
          loadMoreContainer.remove();
          const addedElements = [];
          while (tempContainer.firstChild) {
            const child = tempContainer.firstChild;
            postsContainer.appendChild(child);
            if (child.nodeType === Node.ELEMENT_NODE) {
                addedElements.push(child);
            }
          }
          const newVideos = addedElements.reduce((videos, element) => {
             if (element.matches('.post-video')) {
                videos.push(element);
             } else {
                videos.push(...element.querySelectorAll('.post-video'));
             }
             return videos;
          }, []);
          if(newVideos.length > 0) {
             initializePlyrPlayers(newVideos);
          }
          lightbox.reload();
        })
        .catch(error => {
          console.error('加载更多帖子失败:', error);
          if (button) {
            button.disabled = false;
            button.textContent = '加载失败，点击重试';
            postsContainer.appendChild(loadMoreContainer);
          } else {
            const errorMsg = document.createElement('p');
            errorMsg.textContent = '加载更多内容失败，请稍后刷新页面。';
            errorMsg.style.textAlign = 'center';
            errorMsg.style.color = 'red';
            postsContainer.appendChild(errorMsg);
          }
        });
      }
    }

    function handleScroll() {
      clearTimeout(scrollTimeout);
      scrollTimeout = setTimeout(() => {
        const loadMoreButton = document.querySelector('.load-more-button:not(:disabled)');
        if (loadMoreButton) {
          const buttonRect = loadMoreButton.getBoundingClientRect();
          if (buttonRect.top < window.innerHeight * 1.5) {
            loadMoreButton.click();
          }
        }
      }, 100);
    }

    function setupWebSocket() {
      if (!(topicName && sessionId)) {
        console.warn('未能获取到 topic 或 session id，WebSocket 未连接。');
        return;
      }
      console.log(`初始化 WebSocket 连接：话题 ${topicName}, 会话ID ${sessionId}`);
      const protocol = window.location.protocol === 'https:' ? 'wss://' : 'ws://';
      const host = window.location.host;
      const wsURL = `${protocol}${host}/cable`;
      console.log(`连接到WebSocket URL: ${wsURL}`);
      const socket = new WebSocket(wsURL);
      socket.onopen = function(event) {
        console.log('WebSocket连接已建立');
        const subscribeMsg = {
          command: 'subscribe',
          identifier: JSON.stringify({
            channel: 'TopicChannel',
            topic: topicName,
            connection_id: sessionId
          })
        };
        socket.send(JSON.stringify(subscribeMsg));
        console.log('发送订阅请求:', subscribeMsg);
      };
      socket.onmessage = function(event) {
        const response = JSON.parse(event.data);
        console.log('收到WebSocket消息:', response);
        if (response.type === 'confirm_subscription' || response.type === 'ping') {
          return;
        }
        if (response.message && response.message.html) {
          const data = response.message;
          console.log(`收到话题 #${topicName} 的新帖子数据(WebSocket):`, data);
          const tempDiv = document.createElement('div');
          tempDiv.innerHTML = data.html;
          const newPostElement = tempDiv.firstElementChild;
          if (!newPostElement) return;
          newPostElement.classList.add('new-post-animation');
          postsContainer.insertBefore(newPostElement, postsContainer.firstChild);
          initializePlyrPlayers(newPostElement);
          lightbox.reload();
          setTimeout(() => {
            newPostElement.classList.remove('new-post-animation');
          }, 1000);
          checkUserPosition();
          hasNewPosts = true;
          if (!isUserAtTop && !isUserAtBottom) {
              showNewPostNotification();
          }
        }
      };
      socket.onclose = function(event) {
        console.log('WebSocket连接已关闭:', event);
      };
      socket.onerror = function(error) {
        console.error('WebSocket错误:', error);
      };
    }

    // ===== 初始化和事件监听 =====
    initializePlyrPlayers(postsContainer.querySelectorAll('.post-video'));
    lightbox = GLightbox(lightboxOptions);
    setupWebSocket();
    window.addEventListener('scroll', checkUserPosition);
    window.addEventListener('scroll', handleScroll, { passive: true });
    postsContainer.addEventListener('click', handleLoadMoreClick);
    notification.addEventListener('click', function() {
      window.scrollTo({ top: 0, behavior: 'smooth' });
      hideNewPostNotification();
    });
    checkUserPosition();
    handleScroll();
  });
</script>