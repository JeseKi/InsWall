<div class="topic-wall">
  <div class="topic-header">
    <h1>#<%= @topic %></h1>
    
    <div class="topic-selector">
      <form action="<%= root_path %>" method="get" class="topic-form">
        <select name="topic" id="topic-select" onchange="this.form.submit()">
          <option value="">选择话题...</option>
          <% @topics.each do |topic| %>
            <option value="<%= topic %>" <%= 'selected' if topic == @topic %>>#<%= topic %></option>
          <% end %>
        </select>
      </form>
    </div>
  </div>

  <div class="posts-container" id="posts-container" data-topic="<%= @topic %>" data-connection-id="<%= session.id %>">
    <%= render 'posts', posts: @posts, topic: @topic %>
  </div>
</div>

<% content_for :styles do %>
  <style>
    .topic-wall {
      padding: 20px;
      max-width: 1200px;
      margin: 0 auto;
    }

    .topic-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 30px;
    }
    
    .topic-selector select {
      padding: 8px 12px;
      border: 1px solid #dbdbdb;
      border-radius: 4px;
      background-color: #fff;
      font-size: 1em;
      color: #262626;
      cursor: pointer;
      outline: none;
    }
    
    .topic-selector select:hover {
      border-color: #0095f6;
    }

    .posts-container {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
      gap: 20px;
    }
    
    /* 加载更多按钮 */
    .load-more-container {
      grid-column: 1 / -1;
      text-align: center;
      margin: 20px 0;
    }
    
    .load-more-button {
      background-color: #0095f6;
      color: white;
      border: none;
      border-radius: 4px;
      padding: 10px 20px;
      font-size: 1em;
      cursor: pointer;
      transition: background-color 0.2s;
    }
    
    .load-more-button:hover {
      background-color: #0077c5;
    }
    
    /* 新帖子动画效果 */
    .new-post-animation {
      animation: fadeIn 0.8s ease-in-out;
      border: 2px solid #0095f6;
      box-shadow: 0 0 15px rgba(0, 149, 246, 0.5);
    }
    
    @keyframes fadeIn {
      from {
        opacity: 0;
        transform: translateY(-20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    /* 新帖子通知 */
    .new-post-notification {
      position: fixed;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      background-color: #0095f6;
      color: white;
      padding: 12px 20px;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      z-index: 1000;
      cursor: pointer;
      opacity: 0;
      transition: opacity 0.3s, transform 0.3s;
      pointer-events: none;
    }
    
    .new-post-notification.show {
      opacity: 1;
      pointer-events: auto;
      animation: notificationBounce 0.5s;
    }
    
    @keyframes notificationBounce {
      0%, 20%, 50%, 80%, 100% {transform: translateX(-50%) translateY(0);}
      40% {transform: translateX(-50%) translateY(-10px);}
      60% {transform: translateX(-50%) translateY(-5px);}
    }
  </style>
<% end %>

<!-- 新帖子通知元素 -->
<div id="new-post-notification" class="new-post-notification">
  有新帖子！点击查看
</div>

<!-- 嵌入的 WebSocket 处理代码 -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // 获取当前话题和会话ID
    const topicName = '<%= @topic %>';
    const sessionId = '<%= session.id %>';
    const postsContainer = document.getElementById('posts-container');
    
    console.log(`初始化 WebSocket 连接：话题 ${topicName}, 会话ID ${sessionId}`);
    
    // 新帖子通知相关
    const notification = document.getElementById('new-post-notification');
    let isUserAtBottom = true;
    
    // 检查用户是否在页面底部
    function checkIfUserAtBottom() {
      const scrollPosition = window.scrollY + window.innerHeight;
      const pageHeight = document.body.scrollHeight;
      // 如果用户滚动位置在页面底部附近（允许50px的误差）
      isUserAtBottom = (scrollPosition > pageHeight - 50);
    }
    
    // 监听滚动事件
    window.addEventListener('scroll', checkIfUserAtBottom);
    
    // 显示新帖子通知
    function showNewPostNotification() {
      notification.classList.add('show');
    }
    
    // 隐藏新帖子通知
    function hideNewPostNotification() {
      notification.classList.remove('show');
    }
    
    // 点击通知滚动到顶部
    notification.addEventListener('click', function() {
      window.scrollTo({ top: 0, behavior: 'smooth' });
      hideNewPostNotification();
    });
    
    // WebSocket 连接处理 - 手动创建WebSocket连接，不依赖ActionCable全局对象
    // 获取WebSocket URL
    const protocol = window.location.protocol === 'https:' ? 'wss://' : 'ws://';
    const host = window.location.host;
    const wsURL = `${protocol}${host}/cable`;
    
    console.log(`连接到WebSocket URL: ${wsURL}`);
    
    // 创建WebSocket连接
    const socket = new WebSocket(wsURL);
    
    // 当连接打开时
    socket.onopen = function(event) {
      console.log('WebSocket连接已建立');
      
      // 发送订阅请求
      const subscribeMsg = {
        command: 'subscribe',
        identifier: JSON.stringify({
          channel: 'TopicChannel',
          topic: topicName,
          connection_id: sessionId
        })
      };
      
      socket.send(JSON.stringify(subscribeMsg));
      console.log('发送订阅请求:', subscribeMsg);
    };
    
    // 当收到消息时
    socket.onmessage = function(event) {
      // 解析接收到的数据
      const response = JSON.parse(event.data);
      console.log('收到WebSocket消息:', response);
      
      // 忽略确认消息和ping
      if (response.type === 'confirm_subscription' || response.type === 'ping') {
        return;
      }
      
      // 处理正常消息
      if (response.message) {
        const data = response.message;
        console.log(`收到话题 #${topicName} 的新帖子数据:`, data);
        
        if (data.html) {
          // 处理服务器渲染的HTML
          const tempDiv = document.createElement('div');
          tempDiv.innerHTML = data.html;
          const newPostElement = tempDiv.firstElementChild;
          
          // 添加一个动画类
          newPostElement.classList.add('new-post-animation');
          
          // 将新帖子添加到容器的开头
          postsContainer.insertBefore(newPostElement, postsContainer.firstChild);
          
          // 播放动画
          setTimeout(() => {
            newPostElement.classList.remove('new-post-animation');
          }, 1000);
          
          // 检查用户是否在页面底部
          checkIfUserAtBottom();
          
          // 如果用户不在页面底部，显示通知
          if (!isUserAtBottom) {
            showNewPostNotification();
          }
        }
      }
    };
    
    // 当连接关闭时
    socket.onclose = function(event) {
      console.log('WebSocket连接已关闭:', event);
    };
    
    // 当发生错误时
    socket.onerror = function(error) {
      console.error('WebSocket错误:', error);
    };
    
    // 处理加载更多按钮点击事件
    postsContainer.addEventListener('click', function(event) {
      if (event.target.classList.contains('load-more-button')) {
        const loadMoreContainer = event.target.closest('.load-more-container');
        const topic = loadMoreContainer.dataset.topic;
        const nextPage = loadMoreContainer.dataset.nextPage;
        
        // 禁用按钮，显示加载中状态
        event.target.disabled = true;
        event.target.textContent = '加载中...';
        
        // 发送 AJAX 请求获取更多帖子
        fetch(`/topics/${topic}?page=${nextPage}`, {
          headers: {
            'X-Requested-With': 'XMLHttpRequest'
          }
        })
        .then(response => response.text())
        .then(html => {
          // 移除当前的加载更多按钮
          loadMoreContainer.remove();
          
          // 将新帖子添加到容器中
          const tempDiv = document.createElement('div');
          tempDiv.innerHTML = html;
          
          // 将新内容添加到帖子容器
          while (tempDiv.firstChild) {
            postsContainer.appendChild(tempDiv.firstChild);
          }
        })
        .catch(error => {
          console.error('加载更多帖子失败:', error);
          // 恢复按钮状态
          event.target.disabled = false;
          event.target.textContent = '加载更多';
        });
      }
    });
    
    // 实现滚动到底部自动加载更多
    const handleScroll = () => {
      const loadMoreButton = document.querySelector('.load-more-button');
      if (loadMoreButton) {
        const buttonRect = loadMoreButton.getBoundingClientRect();
        // 如果按钮进入视口，自动点击
        if (buttonRect.top < window.innerHeight && buttonRect.bottom > 0) {
          loadMoreButton.click();
        }
      }
    };
    
    // 添加滚动事件监听
    window.addEventListener('scroll', handleScroll);
    // 初始检查一次，以防按钮已经在视口内
    handleScroll();
  });
</script>
